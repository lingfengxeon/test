spring.application.name=gateway-api
server.port=50013
logging.level.ROOT=DEBUG
#注册服务中心
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://eureka01:8080/eureka/,http://eureka02:8081/eureka/
#表示是否与"服务中心"的发现组件进行结合
spring.cloud.gateway.discovery.locator.enabled=true
#Redis数据库索引(默认是0)
spring.redis.database=0
#Redia服务器的IP
spring.redis.host=127.0.0.1
spring.redis.port=6379
#自定义路由id
spring.cloud.gateway.routes[0].id=ip_route1
#目标服务地址
spring.cloud.gateway.routes[0].uri=http://localhost:50003
#路由条件
spring.cloud.gateway.routes[0].predicates[0]=Path=/hello
#限流过滤器使用gateway内置令牌算法
spring.cloud.gateway.routes[0].filters[0].name=RequestRateLimiter
#声明令牌补充频率,每次一个
spring.cloud.gateway.routes[0].filters[0].args.redis-rate-limiter.replenishRate=1
#令牌桶的最大容量
spring.cloud.gateway.routes[0].filters[0].args.redis-rate-limiter.burstCapacity=2
#用于限流的键的解析器的Bean对象名称 ,它使用SpEl表达式
spring.cloud.gateway.routes[0].filters[0].key-resolver=#{@ipKeyResolver}
#Redis服务器的连接密码
#feign.hystrix.enabled=true
#自定义路由id
#spring.cloud.gateway.routes[1].id=notfound_route1
#目标服务地址
#spring.cloud.gateway.routes[1].uri=forward:/notfound
#路由条件
#spring.cloud.gateway.routes[1].predicates[0]=Path=/**
#自定义路由id
#spring.cloud.gateway.routes[2].id=hystrix_route1
#目标服务地址
#spring.cloud.gateway.routes[2].uri=lb://OPEN-FEIGN
#路由条件
#spring.cloud.gateway.routes[2].predicates[0]=Path=/hello
#过滤器的名字，Gateway将用Hystrix作为名称生成HystrixCommand对象进行熔断管理
#spring.cloud.gateway.routes[0].filters[0].name=Hystrix
#spring.cloud.gateway.routes[0].filters[0].args.name=fallbackcmd
#配置fallback
#spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback